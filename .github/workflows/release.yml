name: release
on:
  workflow_dispatch: {}

env:
  VERSION: ${{ github.run_number }}
  IMAGE:   cr.yandex/${{ secrets.YC_REGISTRY }}/app

jobs:
  build-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { ref: main,
          fetch-depth: 0 }

      - name: fetch full history
        run: |
          git fetch --prune --unshallow  origin "+refs/heads/*:refs/remotes/origin/*" \
                                                "+refs/tags/*:refs/tags/*"
          git checkout main
          git pull --ff-only

      - name: set git identity
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - uses: actions/setup-node@v4
        with: { node-version: 20, cache: 'npm' }

      - run: npm ci
      - run: npm run lint
      - run: npm run test

      - run: |
          git switch -c releases/${VERSION}
          git push -u origin HEAD

      - run: docker login cr.yandex -u oauth -p ${{ secrets.YC_OAUTH_TOKEN }}
      - run: |
          docker build -t ${IMAGE}:${VERSION} -t ${IMAGE}:${VERSION}_latest .
          docker push ${IMAGE}:${VERSION}
          docker push ${IMAGE}:${VERSION}_latest

      - run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "LAST_TAG=${LAST_TAG}" >> $GITHUB_ENV
          git tag ${VERSION}
          git push --tags
      - name: Prepend CHANGELOG
        id: changelog
        run: |
          set -euo pipefail

          LAST_TAG=${{ env.LAST_TAG }}
          COMMITS=$(git log --pretty=format:'- %s' ${LAST_TAG}..HEAD)

          TMP=$(mktemp)
          {
            echo "## ${VERSION} ($(date +%Y-%m-%d))"
            echo "${COMMITS}"
            echo
            cat CHANGELOG.md
          } > "$TMP"
          mv "$TMP" CHANGELOG.md

          if ! git diff --quiet CHANGELOG.md; then
            git add CHANGELOG.md
            git commit -m "chore: changelog for ${VERSION}"
            git push
          fi

          echo "COMMITS<<EOF" >> "$GITHUB_OUTPUT"
          echo "${COMMITS}"   >> "$GITHUB_OUTPUT"
          echo "EOF"          >> "$GITHUB_OUTPUT"
      - name: Open release issue
        run: |
          BODY=$(cat <<EOF
          **Дата:** $(date)
          **Автор:** ${{ github.actor }}
          **Версия:** ${{ env.VERSION }}
          **Коммиты:**
          ${{ steps.changelog.outputs.COMMITS }}
          
          **Образ:** \`cr.yandex/${{ secrets.YC_REGISTRY }}/app:${{ env.VERSION }}\`
          EOF
          )
          gh issue create \
            --title "Release ${VERSION}" \
            --body "$BODY" \
            --label release
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
      - name: Merge back to main
        run: |
          git fetch origin
          git switch main
          git merge --no-ff releases/${VERSION} -m "merge release ${VERSION}"
          git push origin main